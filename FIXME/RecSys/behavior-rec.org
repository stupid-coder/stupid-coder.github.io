#+TITLE: 推荐系统-用户行为序列建模
#+AUTHOR: stupid-coder
#+EMAIL: stupid_coder@163.com
#+OPTIONS: ^:nil H:2 num:nil
#+STARTUP: indent

#+BEGIN_QUOTE
推荐系统中用户的行为常常是根据用户历史行为作为参考来进行推断的.这里用户的行为可以看作是一个行为序列(考虑有行为之间的先后顺序),也可以在某个时间t节点上把之前的行为看作为历史行为(历史行为之间没有先后顺序).

所以一般可以将推荐系统分为两种:
+ 序列化推荐模型 :: 类比于自然预言处理中tag标记等任务.
+ 非序列化推荐模型 :: 常见的有协同过滤,矩阵分解模型,图模型等.

#+CAPTION: 矩阵分解模型,图模型和序列化模型.在时间维度上具有不同假设.
[[file:assets/behavior-rec/rec-model.png]]
#+END_QUOTE

* 序列化推荐

序列化推荐具有很多中模型结构:
+ DNN :: 
+ Attention :: 
+ CNN :: 
+ RNN ::
+ Memory-Network :: 
+ RL ::
 
** DNN
/DNN/ 是工业界最为常见和最为简单的网络结构.序列化推荐中,DNN主要思想是通过 /pooling-layer/ 将用户变长的序列化行为压缩成固定维度的向量.然后堆叠多层MLP.

最为常见的模型结构为 /YoutubeNet[fn:1]/:
#+CAPTION: youtube-net 排序模型.可以看到,impression video通过embedding后,求平均作为用户观看行为的表达.
[[file:assets/behavior-rec/youtube-net.png]]

** Attention
/DNN/ 通过 /pooling-layer/ 的方法对用户历史行为序列是一视同仁的,没有考虑最近的行为对当前时刻的行为影响最大,也没有考虑用户兴趣的多样性,不同的历史行为对当前用户的决策影响也是不一样的.

/Attention/ 机制通过当前item与历史行为序列中的item的关联程度对用户历史行为赋予不同的权重,

** CNN

** RNN

** RL

* TIPS
+ 数据集切分 :: 序列化推荐中,测试集和训练集切分需要以某个时间点作为切分,之前作为训练集,之后最为测试集,防止未来信息泄露(/future information leakage/).参考论文[fn:1]
+ 时间分桶 :: 可以采用2的幂次方来进行分痛,参考论文[fn:2] 
  \begin{equation}
    [0,1),[1,2),[2,4),...,[2^k,2^{k+1})
  \end{equation}
+ 上下文特征和item的特征向量结合 :: 简单的方法直接将上下文特征和item特征向量进行拼接,参考论文[fn:1].另外一种方法是将上下文特征和item的特征向量单独进行embedding,然后进行embedding的求和(+),参考论文[fn:3];进行点乘(*),参考论文[fn:4].
  #+CAPION: 上下文特征和item的特征向量结合方式.
  [[file:assets/behavior-rec/feature-embbeding-merge.png]]
+  :: 
  


* Footnotes
[fn:4] Latent Cross: Making Use of Context in Recurrent Recommender Systems

[fn:3] Attention Is All You Need

[fn:2] ATRank: An Attention-Based User Behavior Modeling Framework for Recommendation

[fn:1] Deep Neural Networks for YouTube Recommendations 
